# library system simalation
class Book:
    def __init__(self, title, author):
        self.title = title
        self.author = author

    def __str__(self):
        return f"'{self.title}' by {self.author}"

class Library:
    def __init__(self):
        self.books = []
        self.borrowed_books = []

    def add_book(self, book):
        self.books.append(book)
        print(f"{book} has been added to the library.")

    def borrow_book(self, title):
        for book in self.books:
            if book.title == title:
                self.books.remove(book)
                self.borrowed_books.append(book)
                print(f"You have borrowed {book}.")
                return
        print("This book is not available.")

    def return_book(self, book):
        if book in self.borrowed_books:
            self.borrowed_books.remove(book)
            self.books.append(book)
            print(f"{book} has been returned to the library.")
        else:
            print("This book was not borrowed from here.")

    def display_available_books(self):
        if self.books:
            print("Available books:")
            for book in self.books:
                print(book)
        else:
            print("No available books.")

def main():
    library = Library()
    library.add_book(Book("The Hobbit", "J.R.R. Tolkien"))
    library.add_book(Book("1984", "George Orwell"))

    print("\nInitial available books:")
    library.display_available_books()

    library.borrow_book("The Hobbit")
    print("\nAfter borrowing 'The Hobbit':")
    library.display_available_books()

    library.return_book(Book("The Hobbit", "J.R.R. Tolkien")) # Note: In a real system, we would handle book identification differently.
    print("\nAfter returning 'The Hobbit':")
    library.display_available_books()

if __name__ == "__main__":
    main()
